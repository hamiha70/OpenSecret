# AsyncVault Project Rules for Cursor AI

## üîí SECURITY - CRITICAL RULES

### NEVER Commit Sensitive Data
- ‚ùå **NEVER** include full RPC URLs with API keys in documentation files
- ‚ùå **NEVER** commit QuickNode URLs like `https://xxx.quiknode.pro/APIKEY/`
- ‚ùå **NEVER** commit private keys, API keys, or secrets in any file
- ‚úÖ **ALWAYS** use placeholders like `<your-rpc-url>` or `$RPC_URL` in docs
- ‚úÖ **ALWAYS** use environment variables for sensitive data
- ‚úÖ **ALWAYS** truncate URLs with `...` in example code (e.g., `.quiknode.pro/...`)

**QuickNode is a paid service with API keys that MUST NOT be exposed!**

**Examples:**
- ‚ùå BAD: `ARBITRUM_SEPOLIA_RPC=https://snowy-cold-shape.arbitrum-sepolia.quiknode.pro/b6e70011263de6b0ff88303b0105a0ff56450586/`
- ‚úÖ GOOD: `ARBITRUM_SEPOLIA_RPC=<your-arbitrum-sepolia-rpc-url>`
- ‚úÖ GOOD: `const RPC = process.env.ARBITRUM_SEPOLIA_RPC`

### Files That Should NEVER Have Secrets
- All `/docs/*.md` files
- All source code files (`.ts`, `.js`, `.tsx`, `.sol`)
- `README.md`
- Any file that gets committed to git

### Files Where Secrets Are OK (BUT MUST BE IN .gitignore)
- `.env` (MUST be in `.gitignore`)
- `.env.local` (MUST be in `.gitignore`)
- `cache/` directories

---

## üìÅ Project Structure

### Documentation Placement
- **Root Level:** Only `README.md` (project overview with links to detailed docs)
- **`/docs/` folder:** All detailed technical documentation
  - `ARCHITECTURE.md` - Complete technical architecture
  - `DEPLOYMENT.md` - Deployment guide and details
  - `ERC7540_RESERVE_MECHANISM.md` - Reserve mechanism explanation
  - `OPERATOR_PATTERN_EXPLAINED.md` - Operator pattern details
  - `AVAIL_SUCCESS.md` - Historical proof of working Avail bridge
  - `USDC_FAUCETS.md` - Testing reference

### Smart Contracts
- **Location:** `contracts-foundry/`
- **Framework:** Foundry (NOT Hardhat)
- **Main Contract:** `src/AsyncVault.sol` (ERC-7540 compliant)
- **Tests:** `test/AsyncVault.t.sol` (comprehensive, 25+ tests)
- **Deployment:** `script/DeployAsyncVault.s.sol`

### Frontend
- **Location:** `frontend/`
- **Framework:** Next.js 14 (App Router)
- **TypeScript:** Required
- **Styling:** Tailwind CSS
- **Key Files:**
  - `app/page.tsx` - Main UI
  - `config/contracts.ts` - Contract addresses and chain config
  - `config/AsyncVault.abi.json` - Generated from Foundry

### Frontend RPC Strategy (CRITICAL)
- **Problem:** MetaMask aggressively caches `eth_call` responses, causing stale UI
- **Solution:** Use QuickNode RPC directly via `fetch()` for **ALL contract state reads**
- **Implementation:**
  ```typescript
  const QUICKNODE_RPC = 'https://capable-old-patina.ethereum-sepolia.quiknode.pro/...'
  
  const fetchViaQuickNode = async (data: string, to: string) => {
    const response = await fetch(QUICKNODE_RPC, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        jsonrpc: '2.0',
        method: 'eth_call',
        params: [{ to, data }, 'latest'],
        id: 1
      })
    })
    const json = await response.json()
    return json.result
  }
  ```
- **When to use:**
  - ‚úÖ **ALWAYS** for vault total USDC balance (changes from market bot)
  - ‚úÖ **In operator bot mode** for shares, pending deposits, pending redeems
  - ‚ùå MetaMask is OK for self-claim mode (user-initiated changes only)
- **Pattern:**
  ```typescript
  const dataHex = operatorBotEnabled 
    ? await fetchViaQuickNode(data, contractAddress)
    : await provider.request({ method: 'eth_call', params: [{ to, data }, 'latest'] })
  ```
- **Why:** Bypasses MetaMask's caching layer entirely, critical when external bots modify state

## üîß Development Conventions

### Contract Development
1. **Always use Foundry** (not Hardhat)
2. **Run tests before deploying:** `forge test -vvv`
3. **Environment variables:** Load from `contracts-foundry/.env` (copied from root `.env`)
4. **Verification:** Use Blockscout (Etherscan often has issues)

### Documentation
1. **Create new docs in `/docs/` folder** (never in root)
2. **Link from README.md** to detailed docs
3. **Delete outdated docs immediately** (no legacy clutter)
4. **Use markdown format** for all documentation

### Naming Conventions
- **Contract:** `AsyncVault` (not OmniVault)
- **Share Token:** `asUSDC` (symbol)
- **Functions:** Follow ERC-7540 standard (`requestDeposit`, `claimDeposit`, etc.)

## üö´ What NOT to Do

### Avoid These Patterns
- ‚ùå **Do NOT create docs in root** (use `/docs/` folder)
- ‚ùå **Do NOT use Hardhat** (we use Foundry)
- ‚ùå **Do NOT mock Avail** (use `@avail-project/nexus-widgets` in browser)
- ‚ùå **Do NOT use virtual accounting** (use direct USDC transfers for profit/loss)
- ‚ùå **Do NOT create temporary/session docs** (consolidate or delete immediately)

### Deprecated Concepts
- ‚ùå OmniVault (renamed to AsyncVault)
- ‚ùå PYUSD (switched to USDC for Avail compatibility)
- ‚ùå virtualProfitLoss (simplified to direct USDC transfers)
- ‚ùå Multi-chain deployment (single-chain on Sepolia only)

## ‚úÖ Best Practices

### When Adding Features
1. Update contract in `contracts-foundry/src/`
2. Add comprehensive tests in `contracts-foundry/test/`
3. Run `forge test -vvv` to verify
4. Update ABI: `forge inspect AsyncVault abi > ../frontend/config/AsyncVault.abi.json`
5. Update frontend if needed
6. Update documentation in `/docs/` if architecture changes
7. Commit with clear message

### When Debugging
1. Check Blockscout for on-chain state
2. Use `forge test -vvv` for contract issues
3. Check browser console for frontend issues
4. Verify function selectors match (use `cast sig "functionName(types)"`)

### When Deploying
1. Ensure `.env` exists in `contracts-foundry/` (copy from root if needed)
2. Run: `forge script script/DeployAsyncVault.s.sol:DeployAsyncVault --rpc-url $ETHEREUM_SEPOLIA_RPC --broadcast`
3. Verify on Blockscout immediately
4. Update `frontend/config/contracts.ts` with new address
5. Update `/docs/DEPLOYMENT.md` with deployment details

## üéØ Architecture Decisions

### ERC-7540 Compliance
- Two-step flow (request ‚Üí claim)
- Reserve mechanism for guaranteed settlements
- Operator pattern for automated claiming

### Profit/Loss Mechanism
- Direct USDC transfers (no virtual accounting)
- Simulator bot transfers USDC to/from vault
- Events emitted for indexer tracking

### Account Roles
- **Deployer:** Contract owner, initial operator
- **Investor:** End-user for testing
- **Simulator:** Market bot for profit/loss simulation

### Network Strategy
- **Single-chain:** Ethereum Sepolia only
- **Avail Integration:** For user onboarding (cross-chain deposits)
- **No LayerZero:** Not using for this project

## üìù Commit Message Format

Use conventional commits:
- `feat:` - New feature
- `fix:` - Bug fix
- `docs:` - Documentation changes
- `refactor:` - Code refactoring
- `test:` - Test additions/changes
- `chore:` - Maintenance tasks

Example:
```
feat: Add reserve mechanism to AsyncVault for ERC-7540 compliance

- Implement totalReserved state variable
- Update requestRedeem to reserve assets immediately
- Add protection in realizeLoss to prevent touching reserved funds
- Add 3 new tests for reserve mechanism
```

## üîó Key Links

- **Deployed Contract:** `0x8A73589fe295A64e9085708636cb04a29c9c4461` (Sepolia)
- **Blockscout:** https://eth-sepolia.blockscout.com/address/0x8A73589fe295A64e9085708636cb04a29c9c4461
- **USDC (Sepolia):** `0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238`

## üéì Learning Resources

- **ERC-7540:** https://eips.ethereum.org/EIPS/eip-7540
- **Avail Nexus:** https://docs.availproject.org/nexus/nexus-cheatsheet
- **Foundry Book:** https://book.getfoundry.sh/

---

**Last Updated:** October 24, 2025
**Project:** AsyncVault for ETHOnline 2025

